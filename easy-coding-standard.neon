includes:
    - vendor/symplify/easy-coding-standard/config/symfony-checkers.neon
    - vendor/symplify/easy-coding-standard/config/php54-checkers.neon
    - vendor/symplify/easy-coding-standard/config/php70-checkers.neon
    - vendor/symplify/easy-coding-standard/config/php71-checkers.neon
    - vendor/symplify/easy-coding-standard/config/common.neon
    - vendor/symplify/easy-coding-standard/config/spaces.neon

checkers:
    # Classes
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Classes\DuplicateClassNameSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\LowercaseClassKeywordsSniff

    # Code Analysis
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\JumbledIncrementerSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UnconditionalIfStatementSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UselessOverridingMethodSniff

    # Control Structures
    - PHP_CodeSniffer\Standards\PEAR\Sniffs\ControlStructures\MultiLineConditionSniff
    - Symplify\CodingStandard\Sniffs\ControlStructures\NewClassSniff

    # Files
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineLengthSniff:
        absoluteLineLimit: 120

    # Metrics
    PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\CyclomaticComplexitySniff:

    PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\NestingLevelSniff:
        absoluteNestingLevel: 4

    # WhiteSpace
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff:
        ignoreBlankLines: false

    # Commenting
    - Symplify\CodingStandard\Sniffs\Commenting\BlockPropertyCommentSniff
    - Symplify\CodingStandard\Sniffs\Commenting\VarConstantCommentSniff

    # Debug and dev
    - Symplify\CodingStandard\Sniffs\Debug\DebugFunctionCallSniff
    - Symplify\CodingStandard\Sniffs\Debug\CommentedOutCodeSniff

    # Naming
    - Symplify\CodingStandard\Sniffs\Naming\AbstractClassNameSniff
    - Symplify\CodingStandard\Sniffs\Naming\InterfaceNameSniff
#
    # Slevomat
    SlevomatCodingStandard\Sniffs\Commenting\ForbiddenAnnotationsSniff:
        forbiddenAnnotations:
            - @author
            - @created
            - @copyright
            - @license
            - @package
            - @version

    # Type Hints
    - SlevomatCodingStandard\Sniffs\TypeHints\LongTypeHintsSniff
    SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff:
        usefulAnnotations:
            - @todo
            - @dataProvider
            - @expectedException
            - @throws
        enableEachParameterAndReturnInspection: true
    - SlevomatCodingStandard\Sniffs\Namespaces\AlphabeticallySortedUsesSniff
    - SlevomatCodingStandard\Sniffs\Namespaces\DisallowGroupUseSniff
    - SlevomatCodingStandard\Sniffs\Namespaces\MultipleUsesPerLineSniff
    - SlevomatCodingStandard\Sniffs\Namespaces\ReferenceUsedNamesOnlySniff
    - SlevomatCodingStandard\Sniffs\Namespaces\UseDoesNotStartWithBackslashSniff
    - SlevomatCodingStandard\Sniffs\Namespaces\UseFromSameNamespaceSniff

    # spaces
    PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
        spacing: one
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short
    - PhpCsFixer\Fixer\LanguageConstruct\DirConstantFixer
    - PhpCsFixer\Fixer\CastNotation\ModernizeTypesCastingFixer
    - PhpCsFixer\Fixer\ReturnNotation\SimplifiedNullReturnFixer

    # PHPUnit
    - Symplify\CodingStandard\Sniffs\PHPUnit\FinalTestCaseSniff

    # Fixes to spaces
    PhpCsFixer\Fixer\ClassNotation\SingleClassElementPerStatementFixer:
        elements: [property]

    PhpCsFixer\Fixer\Basic\BracesFixer:
        allow_single_line_closure: true
    PhpCsFixer\Fixer\ClassNotation\ClassDefinitionFixer:
        singleLine: true
    PhpCsFixer\Fixer\Whitespace\NoExtraConsecutiveBlankLinesFixer:
        - curly_brace_block
        - extra
        - parenthesis_brace_block
        - square_brace_block
        - throw
        - use

    # PHP 7.1 and modern PHP
    PhpCsFixer\Fixer\ClassNotation\VisibilityRequiredFixer:
        - const
        - property
        - method


    # Architecture
    - Symplify\CodingStandard\Sniffs\Classes\EqualInterfaceImplementationSniff
    - Symplify\CodingStandard\Sniffs\Classes\FinalInterfaceSniff

parameters:
    exclude_checkers:
        - PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer
        - PhpCsFixer\Fixer\Phpdoc\PhpdocAlignFixer
        - PhpCsFixer\Fixer\PhpTag\BlankLineAfterOpeningTagFixer
        - PhpCsFixer\Fixer\Operator\NewWithBracesFixer
    skip:
        PHP_CodeSniffer\Standards\PEAR\Sniffs\Functions\FunctionCallSignatureSniff:
            - *
        PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff:
            # "todo" notes
            - app/Modules/Front/Components/Tags/Tags.php
            - app/Modules/Email/Model/EmailService.php
            - app/Modules/Newsletter/Model/NewsletterService.php
